version: '3.8'

services:
  # --- Infrastructure ---
  postgres:
    image: postgres:15-alpine
    container_name: agentichr-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-hr}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hr}
      POSTGRES_DB: ${POSTGRES_DB:-hr}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hr}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agentichr

  redis:
    image: redis:7-alpine
    container_name: agentichr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agentichr

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: agentichr-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - agentichr

  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: agentichr-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - agentichr

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: agentichr-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_URL_USER: keycloak
      KC_DB_URL_PASSWORD: keycloak_password
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8080
      KC_PROXY: edge
    command: start-dev
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agentichr

  kong:
    image: kong:3.4
    container_name: agentichr-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    volumes:
      - ./kong/kong.yml:/etc/kong/kong.yml:ro
    networks:
      - agentichr

  # --- Application Services ---
  auth-svc:
    build:
      context: ..
      dockerfile: docker/auth-svc.Dockerfile
    container_name: agentichr-auth-svc
    environment:
      - DATABASE_URL=postgresql+asyncpg://hr:hr@postgres:5432/hr
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - OIDC_ISSUER=http://keycloak:8080/realms/agentichr
      - JWKS_URL=http://keycloak:8080/realms/agentichr/protocol/openid-connect/certs
      - OIDC_AUDIENCE=agentichr-gw
      - DEFAULT_TENANT_ID=default
    ports:
      - "9001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - agentichr

  employee-svc:
    build:
      context: ..
      dockerfile: docker/employee-svc.Dockerfile
    container_name: agentichr-employee-svc
    environment:
      - DATABASE_URL=postgresql+asyncpg://hr:hr@postgres:5432/hr
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - OIDC_ISSUER=http://keycloak:8080/realms/agentichr
      - JWKS_URL=http://keycloak:8080/realms/agentichr/protocol/openid-connect/certs
      - OIDC_AUDIENCE=agentichr-gw
      - DEFAULT_TENANT_ID=default
    ports:
      - "9002:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - agentichr

  attendance-svc:
    build:
      context: ..
      dockerfile: docker/attendance-svc.Dockerfile
    container_name: agentichr-attendance-svc
    environment:
      - DATABASE_URL=postgresql+asyncpg://hr:hr@postgres:5432/hr
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - OIDC_ISSUER=http://keycloak:8080/realms/agentichr
      - JWKS_URL=http://keycloak:8080/realms/agentichr/protocol/openid-connect/certs
      - OIDC_AUDIENCE=agentichr-gw
      - DEFAULT_TENANT_ID=default
    ports:
      - "9004:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - agentichr

  leave-svc:
    build:
      context: ..
      dockerfile: docker/leave-svc.Dockerfile
    container_name: agentichr-leave-svc
    environment:
      - DATABASE_URL=postgresql+asyncpg://hr:hr@postgres:5432/hr
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - OIDC_ISSUER=http://keycloak:8080/realms/agentichr
      - JWKS_URL=http://keycloak:8080/realms/agentichr/protocol/openid-connect/certs
      - OIDC_AUDIENCE=agentichr-gw
      - DEFAULT_TENANT_ID=default
    ports:
      - "9005:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - agentichr

  agents-gateway:
    build:
      context: ../services/agents-gateway
      dockerfile: Dockerfile
    container_name: agentichr-agents-gateway
    environment:
      - DATABASE_URL=postgresql+asyncpg://hr:hr@postgres:5432/hr
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - DEFAULT_TENANT_ID=default
    ports:
      - "9003:9003"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agentichr

  # --- Workers ---
  auth-worker:
    build:
      context: ..
      dockerfile: docker/auth-svc.Dockerfile
    container_name: agentichr-auth-worker
    command: celery -A app.main.celery_app worker -l info
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentichr

  employee-worker:
    build:
      context: ..
      dockerfile: docker/employee-svc.Dockerfile
    container_name: agentichr-employee-worker
    command: celery -A app.main.celery_app worker -l info
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentichr

  attendance-worker:
    build:
      context: ..
      dockerfile: docker/attendance-svc.Dockerfile
    container_name: agentichr-attendance-worker
    command: celery -A app.main.celery_app worker -l info
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentichr

  leave-worker:
    build:
      context: ..
      dockerfile: docker/leave-svc.Dockerfile
    container_name: agentichr-leave-worker
    command: celery -A app.main.celery_app worker -l info
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentichr

  workflow-worker:
    build:
      context: ../workflows
      dockerfile: Dockerfile
    container_name: agentichr-workflow-worker
    command: python worker.py
    environment:
      - TEMPORAL_HOST=temporal:7233
      - TEMPORAL_NAMESPACE=agentichr
    depends_on:
      - temporal
    networks:
      - agentichr

  # --- Temporal ---
  temporal:
    image: temporalio/auto-setup:1.22.0
    container_name: agentichr-temporal
    ports:
      - "7233:7233"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-hr}
      - POSTGRES_PWD=${POSTGRES_PASSWORD:-hr}
      - POSTGRES_SEEDS=temporal
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agentichr

  temporal-ui:
    image: temporalio/ui:2.18.0
    container_name: agentichr-temporal-ui
    ports:
      - "8088:8088"
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
    depends_on:
      - temporal
    networks:
      - agentichr

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  temporal_data:

networks:
  agentichr:
    driver: bridge

