version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: agentichr-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-hr}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hr}
      POSTGRES_DB: ${POSTGRES_DB:-hr}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hr}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agentichr

  # Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: agentichr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agentichr

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: agentichr-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - agentichr

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: agentichr-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
    ports:
      - "9000:9000"
      - "9090:9090"  # Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9090"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - agentichr

  # Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: agentichr-keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/hr
      KC_DB_USERNAME: ${POSTGRES_USER:-hr}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-hr}
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    command: start-dev --import-realm
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;grep 'HTTP/1.1 200 OK' <&3"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - agentichr

  # API Gateway
  kong:
    image: kong:3.4-alpine
    container_name: agentichr-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"  # Proxy
      - "8001:8001"  # Admin API
      - "8002:8002"  # Admin GUI
    volumes:
      - ./kong/kong.yml:/kong/kong.yml:ro
    depends_on:
      - keycloak
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - agentichr

  # Workflow Engine
  temporal:
    image: temporalio/auto-setup:1.22
    container_name: agentichr-temporal
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-hr}
      - POSTGRES_PWD=${POSTGRES_PASSWORD:-hr}
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - "7233:7233"  # Frontend
      - "8233:8233"  # Web UI
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agentichr

  # Event Streaming
  nats:
    image: nats:2.10-alpine
    container_name: agentichr-nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
      - "6222:6222"  # Routing port for clustering
    command: [
      "--jetstream",
      "--store_dir=/data",
      "--http_port=8222"
    ]
    volumes:
      - nats_data:/data
    networks:
      - agentichr

  # Search Engine
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: agentichr-opensearch
    environment:
      - cluster.name=agentichr-cluster
      - node.name=agentichr-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    networks:
      - agentichr

  # Observability
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: agentichr-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - agentichr

  grafana:
    image: grafana/grafana:10.2.0
    container_name: agentichr-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - agentichr

  loki:
    image: grafana/loki:2.9.0
    container_name: agentichr-loki
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - agentichr

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: agentichr-otel-collector
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
    volumes:
      - ./observability/otel-collector.yml:/etc/otel-collector-config.yml:ro
    command: ["--config=/etc/otel-collector-config.yml"]
    depends_on:
      - prometheus
      - loki
    networks:
      - agentichr

  # Core Services
  auth-svc:
    build:
      context: ../services/auth-svc
      dockerfile: Dockerfile
    container_name: agentichr-auth-svc
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - OIDC_ISSUER=http://keycloak:8080/realms/agentichr
      - JWKS_URL=http://keycloak:8080/realms/agentichr/protocol/openid-connect/certs
      - OIDC_AUDIENCE=agentichr-gw
    ports:
      - "9001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - agentichr

  employee-svc:
    build:
      context: ../services/employee-svc
      dockerfile: Dockerfile
    container_name: agentichr-employee-svc
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - OIDC_ISSUER=http://keycloak:8080/realms/agentichr
      - JWKS_URL=http://keycloak:8080/realms/agentichr/protocol/openid-connect/certs
      - OIDC_AUDIENCE=agentichr-gw
    ports:
      - "9002:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - agentichr

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  nats_data:
  opensearch_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  agentichr:
    driver: bridge
