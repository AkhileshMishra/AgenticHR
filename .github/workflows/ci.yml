name: ci
on:
  push:
  pull_request:

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'      # speed up installs

      - name: Install linters & test deps
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest

      - name: Ruff (lint)
        run: ruff check .

      - name: Unit tests (per service if present)
        run: |
          set -e
          for svc in services/*; do
            if [ -d "$svc/tests" ]; then
              echo "pytest in $svc"
              (cd "$svc" && pytest -q) || exit 1
            else
              echo "no tests in $svc (skipping)"
            fi
          done

      - name: Build Docker images for services
        run: |
          set -e
          for d in services/*; do
            if [ -f "$d/Dockerfile" ]; then
              name=$(basename "$d")
              echo "Building agentichr/$name:ci"
              docker build -t agentichr/$name:ci "$d"
            fi
          done

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Trivy filesystem scan (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          scan-ref: .
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: HIGH,CRITICAL

      # Build and scan each image individually (wildcards not supported by the action input)
      - name: Build & scan images (CRITICAL fail)
        run: |
          set -e
          for d in services/*; do
            if [ -f "$d/Dockerfile" ]; then
              name=$(basename "$d")
              img="agentichr/$name:ci"
              echo "::group::Build $img"
              docker build -t "$img" "$d"
              echo "::endgroup::"
              echo "::group::Trivy scan $img"
              trivy image --exit-code 1 --severity CRITICAL --ignore-unfixed "$img"
              echo "::endgroup::"
            fi
          done

      - name: Ensure docs/compliance exists
        run: mkdir -p docs/compliance

      - name: SBOM (Syft) â€” attach to artifacts
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: docs/compliance/sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-spdx
          path: docs/compliance/sbom.spdx.json
